// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { UserLoginData, UserLoginResponses, UserLoginCallbackData, UserLoginCallbackResponses, UserLogoutData, UserLogoutResponses, UserCheckAuthStatusData, UserCheckAuthStatusResponses, UserCheckAuthStatusErrors, InstitutionsListInstitutionsData, InstitutionsListInstitutionsResponses, InstitutionsListInstitutionsErrors, InstitutionsCreateInstitutionData, InstitutionsCreateInstitutionResponses, InstitutionsCreateInstitutionErrors, InstitutionsDeleteInstitutionData, InstitutionsDeleteInstitutionResponses, InstitutionsDeleteInstitutionErrors, InstitutionsGetInstitutionData, InstitutionsGetInstitutionResponses, InstitutionsGetInstitutionErrors, InstitutionsUpdateInstitutionData, InstitutionsUpdateInstitutionResponses, InstitutionsUpdateInstitutionErrors, InstitutionsGetInstitutionMembersData, InstitutionsGetInstitutionMembersResponses, InstitutionsGetInstitutionMembersErrors, MembersListMembersData, MembersListMembersResponses, MembersListMembersErrors, MembersCreateMemberData, MembersCreateMemberResponses, MembersCreateMemberErrors, MembersDeleteMemberData, MembersDeleteMemberResponses, MembersDeleteMemberErrors, MembersGetMemberData, MembersGetMemberResponses, MembersGetMemberErrors, MembersUpdateMemberData, MembersUpdateMemberResponses, MembersUpdateMemberErrors, BoardMembersListBoardMembershipsData, BoardMembersListBoardMembershipsResponses, BoardMembersListBoardMembershipsErrors, BoardMembersCreateBoardMembershipData, BoardMembersCreateBoardMembershipResponses, BoardMembersCreateBoardMembershipErrors, BoardMembersDeleteBoardMembershipData, BoardMembersDeleteBoardMembershipResponses, BoardMembersDeleteBoardMembershipErrors, BoardMembersGetBoardMembershipData, BoardMembersGetBoardMembershipResponses, BoardMembersGetBoardMembershipErrors, BoardMembersUpdateBoardMembershipData, BoardMembersUpdateBoardMembershipResponses, BoardMembersUpdateBoardMembershipErrors, WorkingGroupsListGroupsData, WorkingGroupsListGroupsResponses, WorkingGroupsListGroupsErrors, WorkingGroupsCreateGroupData, WorkingGroupsCreateGroupResponses, WorkingGroupsCreateGroupErrors, WorkingGroupsDeleteGroupData, WorkingGroupsDeleteGroupResponses, WorkingGroupsDeleteGroupErrors, WorkingGroupsGetGroupData, WorkingGroupsGetGroupResponses, WorkingGroupsGetGroupErrors, WorkingGroupsUpdateGroupData, WorkingGroupsUpdateGroupResponses, WorkingGroupsUpdateGroupErrors, WorkingGroupsListGroupMembersOfGroupData, WorkingGroupsListGroupMembersOfGroupResponses, WorkingGroupsListGroupMembersOfGroupErrors, WorkingGroupsAddMemberToGroupData, WorkingGroupsAddMemberToGroupResponses, WorkingGroupsAddMemberToGroupErrors, WorkingGroupsDeleteGroupMemberData, WorkingGroupsDeleteGroupMemberResponses, WorkingGroupsDeleteGroupMemberErrors, RolesListRolesData, RolesListRolesResponses, RolesListRolesErrors, RolesCreateRoleData, RolesCreateRoleResponses, RolesCreateRoleErrors, RolesDeleteRoleData, RolesDeleteRoleResponses, RolesDeleteRoleErrors, RolesGetRoleData, RolesGetRoleResponses, RolesGetRoleErrors, RolesUpdateRoleData, RolesUpdateRoleResponses, RolesUpdateRoleErrors, ConferencesListConferencesData, ConferencesListConferencesResponses, ConferencesListConferencesErrors, ConferencesCreateConferenceData, ConferencesCreateConferenceResponses, ConferencesCreateConferenceErrors, ConferencesDeleteConferenceData, ConferencesDeleteConferenceResponses, ConferencesDeleteConferenceErrors, ConferencesGetConferenceData, ConferencesGetConferenceResponses, ConferencesGetConferenceErrors, ConferencesUpdateConferenceData, ConferencesUpdateConferenceResponses, ConferencesUpdateConferenceErrors, TalksListTalksData, TalksListTalksResponses, TalksListTalksErrors, TalksCreateTalkData, TalksCreateTalkResponses, TalksCreateTalkErrors, TalksDeleteTalkData, TalksDeleteTalkResponses, TalksDeleteTalkErrors, TalksGetTalkData, TalksGetTalkResponses, TalksGetTalkErrors, TalksUpdateTalkData, TalksUpdateTalkResponses, TalksUpdateTalkErrors, TalkAssignmentsListTalkAssignmentsData, TalkAssignmentsListTalkAssignmentsResponses, TalkAssignmentsListTalkAssignmentsErrors, TalkAssignmentsCreateTalkAssignmentData, TalkAssignmentsCreateTalkAssignmentResponses, TalkAssignmentsCreateTalkAssignmentErrors, TalkAssignmentsDeleteTalkAssignmentData, TalkAssignmentsDeleteTalkAssignmentResponses, TalkAssignmentsDeleteTalkAssignmentErrors, TalkAssignmentsGetTalkAssignmentData, TalkAssignmentsGetTalkAssignmentResponses, TalkAssignmentsGetTalkAssignmentErrors, TalkAssignmentsUpdateTalkAssignmentData, TalkAssignmentsUpdateTalkAssignmentResponses, TalkAssignmentsUpdateTalkAssignmentErrors } from './types.gen';
import { client as _heyApiClient } from './client.gen';
import { institutionsListInstitutionsResponseTransformer, institutionsCreateInstitutionResponseTransformer, institutionsGetInstitutionResponseTransformer, institutionsUpdateInstitutionResponseTransformer, institutionsGetInstitutionMembersResponseTransformer, membersListMembersResponseTransformer, membersCreateMemberResponseTransformer, membersGetMemberResponseTransformer, membersUpdateMemberResponseTransformer, boardMembersListBoardMembershipsResponseTransformer, boardMembersCreateBoardMembershipResponseTransformer, boardMembersGetBoardMembershipResponseTransformer, boardMembersUpdateBoardMembershipResponseTransformer, workingGroupsCreateGroupResponseTransformer, workingGroupsGetGroupResponseTransformer, workingGroupsUpdateGroupResponseTransformer, workingGroupsListGroupMembersOfGroupResponseTransformer, workingGroupsAddMemberToGroupResponseTransformer, conferencesListConferencesResponseTransformer, conferencesCreateConferenceResponseTransformer, conferencesGetConferenceResponseTransformer, conferencesUpdateConferenceResponseTransformer, talksListTalksResponseTransformer, talksCreateTalkResponseTransformer, talksGetTalkResponseTransformer, talksUpdateTalkResponseTransformer, talkAssignmentsListTalkAssignmentsResponseTransformer, talkAssignmentsCreateTalkAssignmentResponseTransformer, talkAssignmentsGetTalkAssignmentResponseTransformer, talkAssignmentsUpdateTalkAssignmentResponseTransformer } from './transformers.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Login
 * _summary_
 *
 * :param Request request: _description_
 * :return _type_: _description_
 */
export const userLogin = <ThrowOnError extends boolean = false>(options?: Options<UserLoginData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UserLoginResponses, unknown, ThrowOnError>({
        responseType: 'json',
        url: '/api/v1/user/login',
        ...options
    });
};

/**
 * Login:Callback
 * _summary_
 *
 * :param Request request: _description_
 * :param Session db: _description_, defaults to Depends(get_db)
 * :return _type_: _description_
 */
export const userLoginCallback = <ThrowOnError extends boolean = false>(options?: Options<UserLoginCallbackData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UserLoginCallbackResponses, unknown, ThrowOnError>({
        responseType: 'json',
        url: '/api/v1/user/callback',
        ...options
    });
};

/**
 * Logout
 * Clears the access_token cookie to log the user out.
 */
export const userLogout = <ThrowOnError extends boolean = false>(options?: Options<UserLogoutData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<UserLogoutResponses, unknown, ThrowOnError>({
        responseType: 'json',
        url: '/api/v1/user/logout',
        ...options
    });
};

/**
 * Check Auth Status
 * Checks the authentication status of the user based on the access_token cookie
 * and returns their authentication status, admin status, email, and name.
 */
export const userCheckAuthStatus = <ThrowOnError extends boolean = false>(options?: Options<UserCheckAuthStatusData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UserCheckAuthStatusResponses, UserCheckAuthStatusErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/v1/user/check-auth',
        ...options
    });
};

/**
 * List all institutions
 * Retrieves a list of all institutions in the collaboration.
 */
export const institutionsListInstitutions = <ThrowOnError extends boolean = false>(options?: Options<InstitutionsListInstitutionsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<InstitutionsListInstitutionsResponses, InstitutionsListInstitutionsErrors, ThrowOnError>({
        responseTransformer: institutionsListInstitutionsResponseTransformer,
        responseType: 'json',
        url: '/api/v1/institutions/',
        ...options
    });
};

/**
 * Create a new institution
 * Creates a new institution with the provided details.
 */
export const institutionsCreateInstitution = <ThrowOnError extends boolean = false>(options: Options<InstitutionsCreateInstitutionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<InstitutionsCreateInstitutionResponses, InstitutionsCreateInstitutionErrors, ThrowOnError>({
        responseTransformer: institutionsCreateInstitutionResponseTransformer,
        responseType: 'json',
        url: '/api/v1/institutions/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete an institution
 * Deletes an institution by its ID.
 */
export const institutionsDeleteInstitution = <ThrowOnError extends boolean = false>(options: Options<InstitutionsDeleteInstitutionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<InstitutionsDeleteInstitutionResponses, InstitutionsDeleteInstitutionErrors, ThrowOnError>({
        url: '/api/v1/institutions/{institution_id}',
        ...options
    });
};

/**
 * Get institution by ID
 * Retrieves a single institution by its unique ID.
 */
export const institutionsGetInstitution = <ThrowOnError extends boolean = false>(options: Options<InstitutionsGetInstitutionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<InstitutionsGetInstitutionResponses, InstitutionsGetInstitutionErrors, ThrowOnError>({
        responseTransformer: institutionsGetInstitutionResponseTransformer,
        responseType: 'json',
        url: '/api/v1/institutions/{institution_id}',
        ...options
    });
};

/**
 * Update an institution
 * Updates an existing institution's details by its ID.
 */
export const institutionsUpdateInstitution = <ThrowOnError extends boolean = false>(options: Options<InstitutionsUpdateInstitutionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<InstitutionsUpdateInstitutionResponses, InstitutionsUpdateInstitutionErrors, ThrowOnError>({
        responseTransformer: institutionsUpdateInstitutionResponseTransformer,
        responseType: 'json',
        url: '/api/v1/institutions/{institution_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List all members of an institution
 * Retrieves all members associated with a specific institution.
 */
export const institutionsGetInstitutionMembers = <ThrowOnError extends boolean = false>(options: Options<InstitutionsGetInstitutionMembersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<InstitutionsGetInstitutionMembersResponses, InstitutionsGetInstitutionMembersErrors, ThrowOnError>({
        responseTransformer: institutionsGetInstitutionMembersResponseTransformer,
        responseType: 'json',
        url: '/api/v1/institutions/{institution_id}/members',
        ...options
    });
};

/**
 * List all members
 * Retrieves a paginated list of all members in the collaboration.
 */
export const membersListMembers = <ThrowOnError extends boolean = false>(options?: Options<MembersListMembersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MembersListMembersResponses, MembersListMembersErrors, ThrowOnError>({
        responseTransformer: membersListMembersResponseTransformer,
        responseType: 'json',
        url: '/api/v1/members/',
        ...options
    });
};

/**
 * Create a new member
 * Creates a new member with the provided details.
 */
export const membersCreateMember = <ThrowOnError extends boolean = false>(options: Options<MembersCreateMemberData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MembersCreateMemberResponses, MembersCreateMemberErrors, ThrowOnError>({
        responseTransformer: membersCreateMemberResponseTransformer,
        responseType: 'json',
        url: '/api/v1/members/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete a member
 * Deletes a member by their unique ID.
 */
export const membersDeleteMember = <ThrowOnError extends boolean = false>(options: Options<MembersDeleteMemberData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<MembersDeleteMemberResponses, MembersDeleteMemberErrors, ThrowOnError>({
        url: '/api/v1/members/{member_id}',
        ...options
    });
};

/**
 * Get a member by ID
 * Retrieves a single member by their unique ID.
 */
export const membersGetMember = <ThrowOnError extends boolean = false>(options: Options<MembersGetMemberData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MembersGetMemberResponses, MembersGetMemberErrors, ThrowOnError>({
        responseTransformer: membersGetMemberResponseTransformer,
        responseType: 'json',
        url: '/api/v1/members/{member_id}',
        ...options
    });
};

/**
 * Update an existing member
 * Updates an existing member's details. Only provided fields will be changed.
 */
export const membersUpdateMember = <ThrowOnError extends boolean = false>(options: Options<MembersUpdateMemberData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<MembersUpdateMemberResponses, MembersUpdateMemberErrors, ThrowOnError>({
        responseTransformer: membersUpdateMemberResponseTransformer,
        responseType: 'json',
        url: '/api/v1/members/{member_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List all institutional/executive board memberships
 * Retrieves a list of all board memberships, with optional filtering by board type, member, or institution.
 */
export const boardMembersListBoardMemberships = <ThrowOnError extends boolean = false>(options?: Options<BoardMembersListBoardMembershipsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<BoardMembersListBoardMembershipsResponses, BoardMembersListBoardMembershipsErrors, ThrowOnError>({
        responseTransformer: boardMembersListBoardMembershipsResponseTransformer,
        responseType: 'json',
        url: '/api/v1/board-members/',
        ...options
    });
};

/**
 * Create a new institutional/executive board membership (Admin only)
 * Creates a new board membership for a member at an institution.
 */
export const boardMembersCreateBoardMembership = <ThrowOnError extends boolean = false>(options: Options<BoardMembersCreateBoardMembershipData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<BoardMembersCreateBoardMembershipResponses, BoardMembersCreateBoardMembershipErrors, ThrowOnError>({
        responseTransformer: boardMembersCreateBoardMembershipResponseTransformer,
        responseType: 'json',
        url: '/api/v1/board-members/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete a board membership (Admin only)
 * Deletes an institutional/executive board membership by its ID.
 */
export const boardMembersDeleteBoardMembership = <ThrowOnError extends boolean = false>(options: Options<BoardMembersDeleteBoardMembershipData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<BoardMembersDeleteBoardMembershipResponses, BoardMembersDeleteBoardMembershipErrors, ThrowOnError>({
        url: '/api/v1/board-members/{ibm_id}',
        ...options
    });
};

/**
 * Get board membership by ID
 * Retrieves a single institutional/executive board membership by its unique ID.
 */
export const boardMembersGetBoardMembership = <ThrowOnError extends boolean = false>(options: Options<BoardMembersGetBoardMembershipData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<BoardMembersGetBoardMembershipResponses, BoardMembersGetBoardMembershipErrors, ThrowOnError>({
        responseTransformer: boardMembersGetBoardMembershipResponseTransformer,
        responseType: 'json',
        url: '/api/v1/board-members/{ibm_id}',
        ...options
    });
};

/**
 * Update a board membership (Admin only)
 * Updates an existing institutional/executive board membership's details by its ID.
 */
export const boardMembersUpdateBoardMembership = <ThrowOnError extends boolean = false>(options: Options<BoardMembersUpdateBoardMembershipData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<BoardMembersUpdateBoardMembershipResponses, BoardMembersUpdateBoardMembershipErrors, ThrowOnError>({
        responseTransformer: boardMembersUpdateBoardMembershipResponseTransformer,
        responseType: 'json',
        url: '/api/v1/board-members/{ibm_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List all working groups
 * Retrieves a list of all working groups in the collaboration without nested relationships.
 */
export const workingGroupsListGroups = <ThrowOnError extends boolean = false>(options?: Options<WorkingGroupsListGroupsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<WorkingGroupsListGroupsResponses, WorkingGroupsListGroupsErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/v1/groups/',
        ...options
    });
};

/**
 * Create a new working group (Admin only)
 * Creates a new working group with the provided name.
 */
export const workingGroupsCreateGroup = <ThrowOnError extends boolean = false>(options: Options<WorkingGroupsCreateGroupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<WorkingGroupsCreateGroupResponses, WorkingGroupsCreateGroupErrors, ThrowOnError>({
        responseTransformer: workingGroupsCreateGroupResponseTransformer,
        responseType: 'json',
        url: '/api/v1/groups/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete a working group (Admin only)
 * Deletes a working group by its ID.
 */
export const workingGroupsDeleteGroup = <ThrowOnError extends boolean = false>(options: Options<WorkingGroupsDeleteGroupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<WorkingGroupsDeleteGroupResponses, WorkingGroupsDeleteGroupErrors, ThrowOnError>({
        url: '/api/v1/groups/{group_id}',
        ...options
    });
};

/**
 * Get working group by ID
 * Retrieves a single working group by its unique ID, including all nested relationships.
 */
export const workingGroupsGetGroup = <ThrowOnError extends boolean = false>(options: Options<WorkingGroupsGetGroupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<WorkingGroupsGetGroupResponses, WorkingGroupsGetGroupErrors, ThrowOnError>({
        responseTransformer: workingGroupsGetGroupResponseTransformer,
        responseType: 'json',
        url: '/api/v1/groups/{group_id}',
        ...options
    });
};

/**
 * Update a working group (Admin only)
 * Updates an existing working group's details by its ID.
 */
export const workingGroupsUpdateGroup = <ThrowOnError extends boolean = false>(options: Options<WorkingGroupsUpdateGroupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<WorkingGroupsUpdateGroupResponses, WorkingGroupsUpdateGroupErrors, ThrowOnError>({
        responseTransformer: workingGroupsUpdateGroupResponseTransformer,
        responseType: 'json',
        url: '/api/v1/groups/{group_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List members of a specific working group
 * Retrieves a list of members belonging to a specific working group.
 */
export const workingGroupsListGroupMembersOfGroup = <ThrowOnError extends boolean = false>(options: Options<WorkingGroupsListGroupMembersOfGroupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<WorkingGroupsListGroupMembersOfGroupResponses, WorkingGroupsListGroupMembersOfGroupErrors, ThrowOnError>({
        responseTransformer: workingGroupsListGroupMembersOfGroupResponseTransformer,
        responseType: 'json',
        url: '/api/v1/groups/{group_id}/members',
        ...options
    });
};

/**
 * Add a member to a working group (Admin only)
 * Adds an existing member to a specific working group with a given role.
 */
export const workingGroupsAddMemberToGroup = <ThrowOnError extends boolean = false>(options: Options<WorkingGroupsAddMemberToGroupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<WorkingGroupsAddMemberToGroupResponses, WorkingGroupsAddMemberToGroupErrors, ThrowOnError>({
        responseTransformer: workingGroupsAddMemberToGroupResponseTransformer,
        responseType: 'json',
        url: '/api/v1/groups/{group_id}/members',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Remove a member from a working group (Admin only)
 * Removes a member from a working group by deleting their group membership entry.
 */
export const workingGroupsDeleteGroupMember = <ThrowOnError extends boolean = false>(options: Options<WorkingGroupsDeleteGroupMemberData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<WorkingGroupsDeleteGroupMemberResponses, WorkingGroupsDeleteGroupMemberErrors, ThrowOnError>({
        url: '/api/v1/groups/group-members/{gm_id}',
        ...options
    });
};

/**
 * List all roles
 * Retrieves a list of all dynamic roles.
 */
export const rolesListRoles = <ThrowOnError extends boolean = false>(options?: Options<RolesListRolesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<RolesListRolesResponses, RolesListRolesErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/v1/roles/',
        ...options
    });
};

/**
 * Create a new role (Admin only)
 * Creates a new dynamic role with a unique name.
 */
export const rolesCreateRole = <ThrowOnError extends boolean = false>(options: Options<RolesCreateRoleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RolesCreateRoleResponses, RolesCreateRoleErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/v1/roles/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete a role (Admin only)
 * Deletes a role by its ID.
 */
export const rolesDeleteRole = <ThrowOnError extends boolean = false>(options: Options<RolesDeleteRoleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<RolesDeleteRoleResponses, RolesDeleteRoleErrors, ThrowOnError>({
        url: '/api/v1/roles/{role_id}',
        ...options
    });
};

/**
 * Get role by ID
 * Retrieves a single role by its unique ID.
 */
export const rolesGetRole = <ThrowOnError extends boolean = false>(options: Options<RolesGetRoleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RolesGetRoleResponses, RolesGetRoleErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/v1/roles/{role_id}',
        ...options
    });
};

/**
 * Update a role (Admin only)
 * Updates an existing role's details by its ID.
 */
export const rolesUpdateRole = <ThrowOnError extends boolean = false>(options: Options<RolesUpdateRoleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<RolesUpdateRoleResponses, RolesUpdateRoleErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/v1/roles/{role_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List all conferences
 * Retrieve a list of all conferences without nested talks.
 */
export const conferencesListConferences = <ThrowOnError extends boolean = false>(options?: Options<ConferencesListConferencesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ConferencesListConferencesResponses, ConferencesListConferencesErrors, ThrowOnError>({
        responseTransformer: conferencesListConferencesResponseTransformer,
        responseType: 'json',
        url: '/api/v1/conferences/',
        ...options
    });
};

/**
 * Create a new conference (Admin only)
 * Create a new conference with given details.
 */
export const conferencesCreateConference = <ThrowOnError extends boolean = false>(options: Options<ConferencesCreateConferenceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ConferencesCreateConferenceResponses, ConferencesCreateConferenceErrors, ThrowOnError>({
        responseTransformer: conferencesCreateConferenceResponseTransformer,
        responseType: 'json',
        url: '/api/v1/conferences/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete a conference (Admin only)
 * Delete a conference by its ID.
 */
export const conferencesDeleteConference = <ThrowOnError extends boolean = false>(options: Options<ConferencesDeleteConferenceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ConferencesDeleteConferenceResponses, ConferencesDeleteConferenceErrors, ThrowOnError>({
        url: '/api/v1/conferences/{conference_id}',
        ...options
    });
};

/**
 * Get conference by ID
 * Retrieve a single conference with optional nested talks.
 */
export const conferencesGetConference = <ThrowOnError extends boolean = false>(options: Options<ConferencesGetConferenceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ConferencesGetConferenceResponses, ConferencesGetConferenceErrors, ThrowOnError>({
        responseTransformer: conferencesGetConferenceResponseTransformer,
        responseType: 'json',
        url: '/api/v1/conferences/{conference_id}',
        ...options
    });
};

/**
 * Update a conference (Admin only)
 * Update details of an existing conference.
 */
export const conferencesUpdateConference = <ThrowOnError extends boolean = false>(options: Options<ConferencesUpdateConferenceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<ConferencesUpdateConferenceResponses, ConferencesUpdateConferenceErrors, ThrowOnError>({
        responseTransformer: conferencesUpdateConferenceResponseTransformer,
        responseType: 'json',
        url: '/api/v1/conferences/{conference_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List all talks
 * Retrieve a list of all talks without nested relationships.
 */
export const talksListTalks = <ThrowOnError extends boolean = false>(options?: Options<TalksListTalksData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<TalksListTalksResponses, TalksListTalksErrors, ThrowOnError>({
        responseTransformer: talksListTalksResponseTransformer,
        responseType: 'json',
        url: '/api/v1/talks/',
        ...options
    });
};

/**
 * Create a new talk (Admin only)
 * Create a new talk assigned to a conference and optionally a member.
 */
export const talksCreateTalk = <ThrowOnError extends boolean = false>(options: Options<TalksCreateTalkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<TalksCreateTalkResponses, TalksCreateTalkErrors, ThrowOnError>({
        responseTransformer: talksCreateTalkResponseTransformer,
        responseType: 'json',
        url: '/api/v1/talks/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete a talk (Admin only)
 * Delete a talk by its ID.
 */
export const talksDeleteTalk = <ThrowOnError extends boolean = false>(options: Options<TalksDeleteTalkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<TalksDeleteTalkResponses, TalksDeleteTalkErrors, ThrowOnError>({
        url: '/api/v1/talks/{talk_id}',
        ...options
    });
};

/**
 * Get talk by ID
 * Retrieve a single talk with nested assignments and conference info.
 */
export const talksGetTalk = <ThrowOnError extends boolean = false>(options: Options<TalksGetTalkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TalksGetTalkResponses, TalksGetTalkErrors, ThrowOnError>({
        responseTransformer: talksGetTalkResponseTransformer,
        responseType: 'json',
        url: '/api/v1/talks/{talk_id}',
        ...options
    });
};

/**
 * Update a talk (Admin only)
 * Update an existing talk's details.
 */
export const talksUpdateTalk = <ThrowOnError extends boolean = false>(options: Options<TalksUpdateTalkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<TalksUpdateTalkResponses, TalksUpdateTalkErrors, ThrowOnError>({
        responseTransformer: talksUpdateTalkResponseTransformer,
        responseType: 'json',
        url: '/api/v1/talks/{talk_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List Talk Assignments
 */
export const talkAssignmentsListTalkAssignments = <ThrowOnError extends boolean = false>(options?: Options<TalkAssignmentsListTalkAssignmentsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<TalkAssignmentsListTalkAssignmentsResponses, TalkAssignmentsListTalkAssignmentsErrors, ThrowOnError>({
        responseTransformer: talkAssignmentsListTalkAssignmentsResponseTransformer,
        responseType: 'json',
        url: '/api/v1/talk-assignments/',
        ...options
    });
};

/**
 * Create Talk Assignment
 */
export const talkAssignmentsCreateTalkAssignment = <ThrowOnError extends boolean = false>(options: Options<TalkAssignmentsCreateTalkAssignmentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<TalkAssignmentsCreateTalkAssignmentResponses, TalkAssignmentsCreateTalkAssignmentErrors, ThrowOnError>({
        responseTransformer: talkAssignmentsCreateTalkAssignmentResponseTransformer,
        responseType: 'json',
        url: '/api/v1/talk-assignments/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Talk Assignment
 */
export const talkAssignmentsDeleteTalkAssignment = <ThrowOnError extends boolean = false>(options: Options<TalkAssignmentsDeleteTalkAssignmentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<TalkAssignmentsDeleteTalkAssignmentResponses, TalkAssignmentsDeleteTalkAssignmentErrors, ThrowOnError>({
        url: '/api/v1/talk-assignments/{assignment_id}',
        ...options
    });
};

/**
 * Get Talk Assignment
 */
export const talkAssignmentsGetTalkAssignment = <ThrowOnError extends boolean = false>(options: Options<TalkAssignmentsGetTalkAssignmentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TalkAssignmentsGetTalkAssignmentResponses, TalkAssignmentsGetTalkAssignmentErrors, ThrowOnError>({
        responseTransformer: talkAssignmentsGetTalkAssignmentResponseTransformer,
        responseType: 'json',
        url: '/api/v1/talk-assignments/{assignment_id}',
        ...options
    });
};

/**
 * Update Talk Assignment
 */
export const talkAssignmentsUpdateTalkAssignment = <ThrowOnError extends boolean = false>(options: Options<TalkAssignmentsUpdateTalkAssignmentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<TalkAssignmentsUpdateTalkAssignmentResponses, TalkAssignmentsUpdateTalkAssignmentErrors, ThrowOnError>({
        responseTransformer: talkAssignmentsUpdateTalkAssignmentResponseTransformer,
        responseType: 'json',
        url: '/api/v1/talk-assignments/{assignment_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};